/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"program":3,"statementList":4,"EOF":5,"statementListBody":6,"separator":7,"statement":8,"NEWLINE":9,"lvalue":10,"=":11,"expression":12,"unitList":13,"additive":14,"booleanOp":15,"comparison":16,"booleanAndOp":17,"booleanOrOp":18,"AND":19,"unitExpression":20,"OR":21,"SIGN":22,"(":23,")":24,"function":25,"literal":26,"IDENTIFIER":27,"tableaccess":28,"DOT":29,"@":30,"tableNameLiteral":31,"table":32,"NUMBER":33,"NEG_NUMBER":34,"STRING":35,"{":36,":":37,"}":38,"fieldList":39,"fieldListBody":40,"field":41,"[":42,"]":43,"|":44,"negative":45,"+":46,"-":47,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",11:"=",19:"AND",21:"OR",22:"SIGN",23:"(",24:")",27:"IDENTIFIER",29:"DOT",30:"@",33:"NUMBER",34:"NEG_NUMBER",35:"STRING",36:"{",37:":",38:"}",42:"[",43:"]",44:"|",46:"+",47:"-"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[4,2],[4,3],[6,1],[6,3],[7,1],[7,2],[8,3],[8,3],[8,1],[12,1],[12,1],[12,1],[15,1],[15,1],[15,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[16,3],[20,3],[20,1],[20,1],[20,1],[10,1],[10,1],[13,2],[13,2],[28,3],[28,3],[26,1],[26,1],[31,1],[31,1],[31,1],[32,3],[32,3],[39,1],[39,2],[39,2],[39,3],[40,1],[40,3],[41,1],[41,3],[41,3],[25,3],[25,5],[25,5],[14,1],[14,3],[14,3],[14,2],[45,2],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:return [];
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0-1];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = [$$[$0]]
break;
case 8:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 9:
break;
case 10:
break;
case 11:this.$ = yy.Declaration($$[$0-2], $$[$0]);
break;
case 12:this.$ = yy.Assignment($$[$0-2], $$[$0]);
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0]
break;
case 17:this.$ = $$[$0]
break;
case 18:this.$ = $$[$0]
break;
case 19:this.$ = $$[$0]
break;
case 20:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 21:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 22:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 23:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 25:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 27:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 28:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 29:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 30:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 31:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 32:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 33:this.$ = $$[$0-1];
break;
case 34:this.$ = $$[$0];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = yy.Variable($$[$0]);
break;
case 38:this.$ = $$[$0];
break;
case 39:this.$ = yy.UnitList([$$[$0-1], $$[$0]]);
break;
case 40:this.$ = $$[$0-1]; $$[$0-1].units.push($$[$0]);
break;
case 41:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 42:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = Number($$[$0]);
break;
case 46:this.$ = Number($$[$0]);
break;
case 47:this.$ = $$[$0].slice(1, -1);
break;
case 48:this.$ = new yy.Table([], true);
break;
case 49:this.$ = new yy.Table($$[$0-1], false);
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0-1];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0-1];
break;
case 54:this.$ = [$$[$0]];
break;
case 55:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 56:this.$ = yy.Field(null, $$[$0]);
break;
case 57:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 58:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 59:this.$ = yy.Lambda([], $$[$0-1]);
break;
case 60:this.$ = yy.Lambda($$[$0-3].units, $$[$0-1]);
break;
case 61:this.$ = yy.Lambda([$$[$0-3]], $$[$0-1]);
break;
case 62:this.$ = $$[$0];
break;
case 63:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 64:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 65:this.$ = yy.Operation($$[$0-1], '+', Number($$[$0]));
break;
case 66:this.$ = yy.Operation(null, $$[$0-1], $$[$0]);
break;
case 67:this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:[1,7],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{1:[3]},{5:[1,23]},{1:[2,2]},{5:[2,3],7:24,9:[1,7],43:[2,3]},{6:25,8:6,9:[1,26],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{5:[2,7],9:[2,7],43:[2,7]},{5:[2,9],9:[2,9],23:[2,9],27:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],38:[2,9],42:[2,9],43:[2,9],47:[2,9]},{11:[1,27],23:[2,36],27:[2,36],29:[2,36],30:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],42:[2,36],44:[2,36]},{5:[2,13],9:[2,13],10:30,11:[1,28],20:29,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],43:[2,13]},{5:[2,37],9:[2,37],11:[2,37],19:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],27:[2,37],29:[2,37],30:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],38:[2,37],42:[2,37],43:[2,37],44:[2,37],46:[2,37],47:[2,37]},{5:[2,38],9:[2,38],11:[2,38],19:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],27:[2,38],29:[2,38],30:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],38:[2,38],42:[2,38],43:[2,38],44:[2,38],46:[2,38],47:[2,38]},{10:30,20:31,23:[1,13],25:14,26:15,27:[1,10],28:11,29:[1,32],30:[1,33],31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{10:30,12:34,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{5:[2,34],9:[2,34],11:[2,34],19:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],27:[2,34],29:[2,34],30:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],38:[2,34],42:[2,34],43:[2,34],44:[2,34],46:[2,34],47:[2,34]},{5:[2,35],9:[2,35],11:[2,35],19:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],27:[2,35],29:[2,35],30:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],38:[2,35],42:[2,35],43:[2,35],44:[2,35],46:[2,35],47:[2,35]},{4:44,6:4,7:5,8:6,9:[1,7],10:8,13:45,20:46,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{5:[2,43],9:[2,43],11:[2,43],19:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],27:[2,43],29:[2,43],30:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],38:[2,43],42:[2,43],43:[2,43],44:[2,43],46:[2,43],47:[2,43]},{5:[2,44],9:[2,44],11:[2,44],19:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],27:[2,44],29:[2,44],30:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],38:[2,44],42:[2,44],43:[2,44],44:[2,44],46:[2,44],47:[2,44]},{5:[2,45],9:[2,45],11:[2,45],19:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],27:[2,45],29:[2,45],30:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],42:[2,45],43:[2,45],44:[2,45],46:[2,45],47:[2,45]},{5:[2,46],9:[2,46],11:[2,46],19:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],27:[2,46],29:[2,46],30:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],42:[2,46],43:[2,46],44:[2,46],46:[2,46],47:[2,46]},{5:[2,47],9:[2,47],11:[2,47],19:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],27:[2,47],29:[2,47],30:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],42:[2,47],43:[2,47],44:[2,47],46:[2,47],47:[2,47]},{7:50,9:[1,7],10:30,12:52,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,53],28:11,31:54,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],37:[1,47],39:48,40:49,41:51,42:[1,16],45:39,47:[1,43]},{1:[2,1]},{5:[2,4],8:55,9:[1,26],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],43:[2,4]},{5:[2,5],7:56,9:[1,7],43:[2,5]},{5:[2,10],9:[2,10],23:[2,10],27:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],38:[2,10],42:[2,10],43:[2,10],47:[2,10]},{10:30,12:57,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,12:58,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{5:[2,40],9:[2,40],11:[2,40],23:[2,40],24:[2,40],27:[2,40],29:[1,32],30:[1,33],33:[2,40],34:[2,40],35:[2,40],36:[2,40],38:[2,40],42:[2,40],43:[2,40],44:[2,40]},{5:[2,36],9:[2,36],11:[2,36],19:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],27:[2,36],29:[2,36],30:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],38:[2,36],42:[2,36],43:[2,36],44:[2,36],46:[2,36],47:[2,36]},{5:[2,39],9:[2,39],11:[2,39],23:[2,39],24:[2,39],27:[2,39],29:[1,32],30:[1,33],33:[2,39],34:[2,39],35:[2,39],36:[2,39],38:[2,39],42:[2,39],43:[2,39],44:[2,39]},{27:[1,59]},{10:30,20:60,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{24:[1,61]},{5:[2,14],9:[2,14],10:30,20:29,23:[1,13],24:[2,14],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],38:[2,14],42:[1,16],43:[2,14]},{5:[2,15],9:[2,15],22:[1,65],24:[2,15],34:[1,64],38:[2,15],43:[2,15],46:[1,62],47:[1,63]},{5:[2,16],9:[2,16],24:[2,16],38:[2,16],43:[2,16]},{5:[2,67],9:[2,67],10:30,19:[1,66],20:31,21:[1,67],22:[2,67],23:[1,13],24:[2,67],25:14,26:15,27:[1,10],28:11,29:[1,32],30:[1,33],31:17,32:18,33:[1,19],34:[2,67],35:[1,21],36:[1,22],38:[2,67],42:[1,16],43:[2,67],46:[2,67],47:[2,67]},{5:[2,62],9:[2,62],19:[2,62],21:[2,62],22:[2,62],24:[2,62],34:[2,62],38:[2,62],43:[2,62],46:[2,62],47:[2,62]},{5:[2,17],9:[2,17],19:[1,68],21:[1,69],24:[2,17],38:[2,17],43:[2,17]},{5:[2,18],9:[2,18],19:[1,70],24:[2,18],38:[2,18],43:[2,18]},{5:[2,19],9:[2,19],21:[1,71],24:[2,19],38:[2,19],43:[2,19]},{10:30,20:73,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:72,47:[1,43]},{43:[1,74]},{9:[2,13],10:30,11:[1,28],20:29,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],43:[2,13],44:[1,75]},{10:30,20:31,23:[1,13],25:14,26:15,27:[1,10],28:11,29:[1,32],30:[1,33],31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],44:[1,76]},{38:[1,77]},{38:[1,78]},{7:79,9:[1,7],38:[2,50]},{9:[1,26],10:30,12:52,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,53],28:11,31:54,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],40:80,41:51,42:[1,16],45:39,47:[1,43]},{9:[2,54],38:[2,54]},{9:[2,56],38:[2,56]},{9:[2,37],19:[2,37],21:[2,37],22:[2,37],23:[2,37],27:[2,37],29:[2,37],30:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[1,81],38:[2,37],42:[2,37],46:[2,37],47:[2,37]},{9:[2,43],19:[2,43],21:[2,43],22:[2,43],23:[2,43],27:[2,43],29:[2,43],30:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[1,82],38:[2,43],42:[2,43],46:[2,43],47:[2,43]},{5:[2,8],9:[2,8],43:[2,8]},{5:[2,6],8:55,9:[1,26],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],43:[2,6]},{5:[2,11],9:[2,11],43:[2,11]},{5:[2,12],9:[2,12],43:[2,12]},{5:[2,41],9:[2,41],11:[2,41],19:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],27:[2,41],29:[2,41],30:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],38:[2,41],42:[2,41],43:[2,41],44:[2,41],46:[2,41],47:[2,41]},{5:[2,42],9:[2,42],11:[2,42],19:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],27:[2,42],29:[1,32],30:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],38:[2,42],42:[2,42],43:[2,42],44:[2,42],46:[2,42],47:[2,42]},{5:[2,33],9:[2,33],11:[2,33],19:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],27:[2,33],29:[2,33],30:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],38:[2,33],42:[2,33],43:[2,33],44:[2,33],46:[2,33],47:[2,33]},{10:30,14:83,20:73,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:84,20:73,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{5:[2,65],9:[2,65],19:[2,65],21:[2,65],22:[2,65],24:[2,65],34:[2,65],38:[2,65],43:[2,65],46:[2,65],47:[2,65]},{10:30,14:85,20:73,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:86,20:87,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:89,20:90,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:91,20:92,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:93,20:94,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:95,20:96,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,14:88,16:97,20:98,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{5:[2,66],9:[2,66],19:[2,66],21:[2,66],22:[2,66],24:[2,66],34:[2,66],38:[2,66],43:[2,66],46:[2,66],47:[2,66]},{5:[2,67],9:[2,67],19:[2,67],21:[2,67],22:[2,67],24:[2,67],29:[1,32],30:[1,33],34:[2,67],38:[2,67],43:[2,67],46:[2,67],47:[2,67]},{5:[2,59],9:[2,59],11:[2,59],19:[2,59],21:[2,59],22:[2,59],23:[2,59],24:[2,59],27:[2,59],29:[2,59],30:[2,59],33:[2,59],34:[2,59],35:[2,59],36:[2,59],38:[2,59],42:[2,59],43:[2,59],44:[2,59],46:[2,59],47:[2,59]},{4:99,6:4,7:5,8:6,9:[1,7],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{4:100,6:4,7:5,8:6,9:[1,7],10:8,13:9,20:12,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16]},{5:[2,48],9:[2,48],11:[2,48],19:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],27:[2,48],29:[2,48],30:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],38:[2,48],42:[2,48],43:[2,48],44:[2,48],46:[2,48],47:[2,48]},{5:[2,49],9:[2,49],11:[2,49],19:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],27:[2,49],29:[2,49],30:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],38:[2,49],42:[2,49],43:[2,49],44:[2,49],46:[2,49],47:[2,49]},{9:[1,26],10:30,12:52,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,53],28:11,31:54,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],38:[2,51],41:101,42:[1,16],45:39,47:[1,43]},{7:102,9:[1,7],38:[2,52]},{10:30,12:103,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{10:30,12:104,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,10],28:11,31:17,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],42:[1,16],45:39,47:[1,43]},{5:[2,63],9:[2,63],19:[2,63],21:[2,63],22:[2,63],24:[2,63],34:[2,63],38:[2,63],43:[2,63],46:[2,63],47:[2,63]},{5:[2,64],9:[2,64],19:[2,64],21:[2,64],22:[2,64],24:[2,64],34:[2,64],38:[2,64],43:[2,64],46:[2,64],47:[2,64]},{5:[2,32],9:[2,32],19:[2,32],21:[2,32],24:[2,32],34:[1,64],38:[2,32],43:[2,32],46:[1,62],47:[1,63]},{5:[2,22],9:[2,22],19:[2,22],24:[2,22],38:[2,22],43:[2,22]},{5:[2,23],9:[2,23],19:[2,23],22:[2,67],24:[2,23],29:[1,32],30:[1,33],34:[2,67],38:[2,23],43:[2,23],46:[2,67],47:[2,67]},{22:[1,65],34:[1,64],46:[1,62],47:[1,63]},{5:[2,28],9:[2,28],21:[2,28],24:[2,28],38:[2,28],43:[2,28]},{5:[2,29],9:[2,29],21:[2,29],22:[2,67],24:[2,29],29:[1,32],30:[1,33],34:[2,67],38:[2,29],43:[2,29],46:[2,67],47:[2,67]},{5:[2,20],9:[2,20],19:[2,20],24:[2,20],38:[2,20],43:[2,20]},{5:[2,21],9:[2,21],19:[2,21],22:[2,67],24:[2,21],29:[1,32],30:[1,33],34:[2,67],38:[2,21],43:[2,21],46:[2,67],47:[2,67]},{5:[2,26],9:[2,26],21:[2,26],24:[2,26],38:[2,26],43:[2,26]},{5:[2,27],9:[2,27],21:[2,27],22:[2,67],24:[2,27],29:[1,32],30:[1,33],34:[2,67],38:[2,27],43:[2,27],46:[2,67],47:[2,67]},{5:[2,24],9:[2,24],19:[2,24],24:[2,24],38:[2,24],43:[2,24]},{5:[2,25],9:[2,25],19:[2,25],22:[2,67],24:[2,25],29:[1,32],30:[1,33],34:[2,67],38:[2,25],43:[2,25],46:[2,67],47:[2,67]},{5:[2,30],9:[2,30],21:[2,30],24:[2,30],38:[2,30],43:[2,30]},{5:[2,31],9:[2,31],21:[2,31],22:[2,67],24:[2,31],29:[1,32],30:[1,33],34:[2,67],38:[2,31],43:[2,31],46:[2,67],47:[2,67]},{43:[1,105]},{43:[1,106]},{9:[2,55],38:[2,55]},{9:[1,26],10:30,12:52,13:35,14:36,15:37,16:40,17:41,18:42,20:38,23:[1,13],25:14,26:15,27:[1,53],28:11,31:54,32:18,33:[1,19],34:[1,20],35:[1,21],36:[1,22],38:[2,53],41:101,42:[1,16],45:39,47:[1,43]},{9:[2,57],38:[2,57]},{9:[2,58],38:[2,58]},{5:[2,60],9:[2,60],11:[2,60],19:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],27:[2,60],29:[2,60],30:[2,60],33:[2,60],34:[2,60],35:[2,60],36:[2,60],38:[2,60],42:[2,60],43:[2,60],44:[2,60],46:[2,60],47:[2,60]},{5:[2,61],9:[2,61],11:[2,61],19:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],27:[2,61],29:[2,61],30:[2,61],33:[2,61],34:[2,61],35:[2,61],36:[2,61],38:[2,61],42:[2,61],43:[2,61],44:[2,61],46:[2,61],47:[2,61]}],
defaultActions: {3:[2,2],23:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "NEWLINE"
break;
case 1:/* skip other whitespace */
break;
case 2:return "SIGN"
break;
case 3:return "AND"
break;
case 4:return "OR"
break;
case 5:return "NEG_NUMBER"
break;
case 6:return "NEG_NUMBER"
break;
case 7:return "NUMBER"
break;
case 8:return "NUMBER"
break;
case 9:return "*"
break;
case 10:return "/"
break;
case 11:return "-"
break;
case 12:return "+"
break;
case 13:return "%"
break;
case 14:return "@"
break;
case 15:return "("
break;
case 16:return ")"
break;
case 17:return "{"
break;
case 18:return "}"
break;
case 19:return "|"
break;
case 20:return "["
break;
case 21:return "]"
break;
case 22:return "="
break;
case 23:return "!"
break;
case 24:return ":"
break;
case 25:return "DOT"
break;
case 26:return "STRING"
break;
case 27:return "IDENTIFIER"
break;
case 28:return "EOF"
break;
case 29:return "INVALID"
break;
case 30:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\n\s*)/,/^(?:\s+)/,/^(?:==|!=|<=|>=|<|>)/,/^(?:and)/,/^(?:or)/,/^(?:-[0-9]+\.?)/,/^(?:-([0-9]+)?\.[0-9]+)/,/^(?:[0-9]+\.?)/,/^(?:([0-9]+)?\.[0-9]+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\%)/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\!)/,/^(?:\:)/,/^(?:\.)/,/^(?:\"(\\.|[^"\n])*\")/,/^(?:[a-zA-Z_$][a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

parser.yy = require('./parse-tree.js');
module.exports = parser;
