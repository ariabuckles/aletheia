/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"program":3,"statementList":4,"EOF":5,"statementListBody":6,"separator":7,"statement":8,"NEWLINE":9,"lvalue":10,"=":11,"expression":12,"unitList":13,"unitExpression":14,"additive":15,"booleanOp":16,"comparison":17,"booleanAndOp":18,"booleanOrOp":19,"AND":20,"OR":21,"SIGN":22,"(":23,")":24,"function":25,"literal":26,"singleUnitList":27,"JAVASCRIPT":28,"IDENTIFIER":29,"tableaccess":30,"DOT":31,"@":32,"tableNameLiteral":33,"table":34,"REGEX":35,"NUMBER":36,"NEG_NUMBER":37,"STRING":38,"{":39,"}":40,":":41,"fieldList":42,"fieldListBody":43,"field":44,",":45,"[":46,"]":47,"|":48,"multiplicative":49,"+":50,"-":51,"negative":52,"*":53,"/":54,"%":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",11:"=",20:"AND",21:"OR",22:"SIGN",23:"(",24:")",28:"JAVASCRIPT",29:"IDENTIFIER",31:"DOT",32:"@",35:"REGEX",36:"NUMBER",37:"NEG_NUMBER",38:"STRING",39:"{",40:"}",41:":",45:",",46:"[",47:"]",48:"|",50:"+",51:"-",53:"*",54:"/",55:"%"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[4,2],[4,3],[6,1],[6,3],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[12,1],[12,1],[12,1],[16,1],[16,1],[16,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[17,3],[14,3],[14,1],[14,1],[14,1],[14,1],[14,1],[10,1],[10,1],[13,2],[13,2],[27,3],[30,3],[30,3],[26,1],[26,1],[26,1],[33,1],[33,1],[33,1],[34,2],[34,3],[34,3],[42,1],[42,2],[42,2],[42,3],[43,1],[43,3],[43,3],[43,4],[44,1],[44,3],[44,3],[25,3],[25,5],[25,5],[15,1],[15,3],[15,3],[49,1],[49,3],[49,3],[49,3],[52,2],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:return [];
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0-1];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = [$$[$0]];
break;
case 8:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 9:
break;
case 10:
break;
case 11:this.$ = yy.Declaration($$[$0-2], $$[$0]);
break;
case 12:this.$ = yy.Assignment($$[$0-2], $$[$0]);
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0]
break;
case 18:this.$ = $$[$0]
break;
case 19:this.$ = $$[$0]
break;
case 20:this.$ = $$[$0]
break;
case 21:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 22:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 23:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 25:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 27:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 28:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 29:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 30:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 31:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 32:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 33:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 34:this.$ = $$[$0-1];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = $$[$0];
break;
case 39:this.$ = yy.Javascript($$[$0].slice(3, -3));
break;
case 40:this.$ = yy.Variable($$[$0]);
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = yy.UnitList([$$[$0-1], $$[$0]]);
break;
case 43:this.$ = $$[$0]; $$[$0].units.unshift($$[$0-1]);
break;
case 44:this.$ = yy.UnitList([$$[$0-2]]);
break;
case 45:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 46:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = yy.Regex($$[$0]);
break;
case 50:this.$ = Number($$[$0]);
break;
case 51:this.$ = Number($$[$0]);
break;
case 52:this.$ = yy.String($$[$0]);
break;
case 53:this.$ = new yy.Table([], false);
break;
case 54:this.$ = new yy.Table([], true);
break;
case 55:this.$ = new yy.Table($$[$0-1], false);
break;
case 56:this.$ = $$[$0];
break;
case 57:this.$ = $$[$0-1];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = $$[$0-1];
break;
case 60:this.$ = [$$[$0]];
break;
case 61:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 62:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 63:this.$ = $$[$0-3]; $$[$0-3].push($$[$0]);
break;
case 64:this.$ = yy.Field(null, $$[$0]);
break;
case 65:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 66:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 67:this.$ = yy.Lambda([], $$[$0-1]);
break;
case 68:this.$ = yy.Lambda($$[$0-3].units, $$[$0-1]);
break;
case 69:this.$ = yy.Lambda([$$[$0-3]], $$[$0-1]);
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 72:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 73:this.$ = $$[$0];
break;
case 74:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 75:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 76:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 77:this.$ = yy.Operation(null, $$[$0-1], $$[$0]);
break;
case 78:this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:[1,7],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{1:[3]},{5:[1,26]},{1:[2,2]},{5:[2,3],7:27,9:[1,7],47:[2,3]},{6:28,8:6,9:[1,29],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{5:[2,7],9:[2,7],47:[2,7]},{5:[2,9],9:[2,9],23:[2,9],28:[2,9],29:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],46:[2,9],47:[2,9],51:[2,9]},{5:[2,37],9:[2,37],11:[1,30],23:[2,37],28:[2,37],29:[2,37],31:[2,37],32:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],46:[2,37],47:[2,37],48:[2,37]},{5:[2,13],9:[2,13],11:[1,31],47:[2,13]},{5:[2,14],9:[2,14],10:37,13:33,14:32,23:[1,36],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,31:[1,34],32:[1,35],33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],47:[2,14]},{5:[2,40],9:[2,40],11:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],28:[2,40],29:[2,40],31:[2,40],32:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],50:[2,40],51:[2,40],53:[2,40],54:[2,40],55:[2,40]},{5:[2,41],9:[2,41],11:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],28:[2,41],29:[2,41],31:[2,41],32:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],50:[2,41],51:[2,41],53:[2,41],54:[2,41],55:[2,41]},{10:37,12:38,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{5:[2,35],9:[2,35],11:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],28:[2,35],29:[2,35],31:[2,35],32:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],50:[2,35],51:[2,35],53:[2,35],54:[2,35],55:[2,35]},{5:[2,36],9:[2,36],11:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],28:[2,36],29:[2,36],31:[2,36],32:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],50:[2,36],51:[2,36],53:[2,36],54:[2,36],55:[2,36]},{5:[2,38],9:[2,38],11:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],28:[2,38],29:[2,38],31:[2,38],32:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38],50:[2,38],51:[2,38],53:[2,38],54:[2,38],55:[2,38]},{5:[2,39],9:[2,39],11:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],28:[2,39],29:[2,39],31:[2,39],32:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],50:[2,39],51:[2,39],53:[2,39],54:[2,39],55:[2,39]},{4:49,6:4,7:5,8:6,9:[1,7],10:8,13:50,14:51,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{5:[2,47],9:[2,47],11:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],28:[2,47],29:[2,47],31:[2,47],32:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],50:[2,47],51:[2,47],53:[2,47],54:[2,47],55:[2,47]},{5:[2,48],9:[2,48],11:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],28:[2,48],29:[2,48],31:[2,48],32:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],50:[2,48],51:[2,48],53:[2,48],54:[2,48],55:[2,48]},{5:[2,49],9:[2,49],11:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],28:[2,49],29:[2,49],31:[2,49],32:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],50:[2,49],51:[2,49],53:[2,49],54:[2,49],55:[2,49]},{5:[2,50],9:[2,50],11:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],28:[2,50],29:[2,50],31:[2,50],32:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],50:[2,50],51:[2,50],53:[2,50],54:[2,50],55:[2,50]},{5:[2,51],9:[2,51],11:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],28:[2,51],29:[2,51],31:[2,51],32:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],50:[2,51],51:[2,51],53:[2,51],54:[2,51],55:[2,51]},{5:[2,52],9:[2,52],11:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],28:[2,52],29:[2,52],31:[2,52],32:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],50:[2,52],51:[2,52],53:[2,52],54:[2,52],55:[2,52]},{7:56,9:[1,7],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],40:[1,52],41:[1,53],42:54,43:55,44:57,46:[1,18],49:43,51:[1,48],52:47},{1:[2,1]},{5:[2,4],8:61,9:[1,29],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],47:[2,4]},{5:[2,5],7:62,9:[1,7],47:[2,5]},{5:[2,10],9:[2,10],23:[2,10],28:[2,10],29:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],46:[2,10],47:[2,10],51:[2,10]},{10:37,12:63,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,12:64,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{5:[2,42],9:[2,42],10:37,11:[2,42],13:33,14:32,23:[1,36],24:[2,42],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,31:[1,34],32:[1,35],33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],40:[2,42],45:[2,42],46:[1,18],47:[2,42],48:[2,42]},{5:[2,43],9:[2,43],11:[2,43],24:[2,43],40:[2,43],45:[2,43],47:[2,43],48:[2,43]},{29:[1,65]},{10:37,14:66,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{10:37,12:38,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],24:[1,67],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{5:[2,37],9:[2,37],11:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],28:[2,37],29:[2,37],31:[2,37],32:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37],50:[2,37],51:[2,37],53:[2,37],54:[2,37],55:[2,37]},{24:[1,68]},{5:[2,15],9:[2,15],24:[2,15],40:[2,15],45:[2,15],47:[2,15]},{5:[2,16],9:[2,16],22:[1,71],24:[2,16],40:[2,16],45:[2,16],47:[2,16],50:[1,69],51:[1,70]},{5:[2,17],9:[2,17],24:[2,17],40:[2,17],45:[2,17],47:[2,17]},{5:[2,78],9:[2,78],10:37,13:33,14:32,20:[1,72],21:[1,73],22:[2,78],23:[1,36],24:[2,78],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,31:[1,34],32:[1,35],33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],40:[2,78],45:[2,78],46:[1,18],47:[2,78],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,70],9:[2,70],20:[2,70],21:[2,70],22:[2,70],24:[2,70],40:[2,70],45:[2,70],47:[2,70],50:[2,70],51:[2,70],53:[1,74],54:[1,75],55:[1,76]},{5:[2,18],9:[2,18],20:[1,77],21:[1,78],24:[2,18],40:[2,18],45:[2,18],47:[2,18]},{5:[2,19],9:[2,19],20:[1,79],24:[2,19],40:[2,19],45:[2,19],47:[2,19]},{5:[2,20],9:[2,20],21:[1,80],24:[2,20],40:[2,20],45:[2,20],47:[2,20]},{5:[2,73],9:[2,73],20:[2,73],21:[2,73],22:[2,73],24:[2,73],40:[2,73],45:[2,73],47:[2,73],50:[2,73],51:[2,73],53:[2,73],54:[2,73],55:[2,73]},{10:37,14:82,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],51:[1,48],52:81},{47:[1,83]},{9:[2,13],11:[1,31],47:[2,13],48:[1,84]},{9:[2,14],10:37,13:33,14:32,23:[1,36],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,31:[1,34],32:[1,35],33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],47:[2,14],48:[1,85]},{5:[2,53],9:[2,53],11:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],28:[2,53],29:[2,53],31:[2,53],32:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],50:[2,53],51:[2,53],53:[2,53],54:[2,53],55:[2,53]},{40:[1,86]},{40:[1,87]},{7:88,9:[1,7],40:[2,56],45:[1,89]},{9:[1,29],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],43:90,44:57,46:[1,18],49:43,51:[1,48],52:47},{9:[2,60],40:[2,60],45:[2,60]},{9:[2,64],40:[2,64],45:[2,64]},{9:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],28:[2,40],29:[2,40],31:[2,40],32:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[1,91],45:[2,40],46:[2,40],50:[2,40],51:[2,40],53:[2,40],54:[2,40],55:[2,40]},{9:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],28:[2,47],29:[2,47],31:[2,47],32:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[1,92],45:[2,47],46:[2,47],50:[2,47],51:[2,47],53:[2,47],54:[2,47],55:[2,47]},{5:[2,8],9:[2,8],47:[2,8]},{5:[2,6],8:61,9:[1,29],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],47:[2,6]},{5:[2,11],9:[2,11],47:[2,11]},{5:[2,12],9:[2,12],47:[2,12]},{5:[2,45],9:[2,45],11:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],28:[2,45],29:[2,45],31:[2,45],32:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],50:[2,45],51:[2,45],53:[2,45],54:[2,45],55:[2,45]},{5:[2,46],9:[2,46],11:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[1,93],24:[2,46],28:[2,46],29:[2,46],31:[1,34],32:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],50:[2,46],51:[2,46],53:[2,46],54:[2,46],55:[2,46]},{5:[2,44],9:[2,44],11:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],28:[2,44],29:[2,44],31:[2,44],32:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],50:[2,44],51:[2,44],53:[2,44],54:[2,44],55:[2,44]},{5:[2,34],9:[2,34],11:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],28:[2,34],29:[2,34],31:[2,34],32:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],50:[2,34],51:[2,34],53:[2,34],54:[2,34],55:[2,34]},{10:37,14:82,15:94,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:82,15:95,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:82,15:96,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:98,15:99,17:97,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:101,15:99,17:100,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:82,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:102,51:[1,48],52:47},{10:37,14:82,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:103,51:[1,48],52:47},{10:37,14:82,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:104,51:[1,48],52:47},{10:37,14:106,15:99,17:105,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:108,15:99,17:107,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:110,15:99,17:109,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,14:112,15:99,17:111,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{5:[2,77],9:[2,77],20:[2,77],21:[2,77],22:[2,77],24:[2,77],40:[2,77],45:[2,77],47:[2,77],50:[2,77],51:[2,77],53:[2,77],54:[2,77],55:[2,77]},{5:[2,78],9:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[1,93],24:[2,78],31:[1,34],32:[1,35],40:[2,78],45:[2,78],47:[2,78],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,67],9:[2,67],11:[2,67],20:[2,67],21:[2,67],22:[2,67],23:[2,67],24:[2,67],28:[2,67],29:[2,67],31:[2,67],32:[2,67],35:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],40:[2,67],45:[2,67],46:[2,67],47:[2,67],48:[2,67],50:[2,67],51:[2,67],53:[2,67],54:[2,67],55:[2,67]},{4:113,6:4,7:5,8:6,9:[1,7],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{4:114,6:4,7:5,8:6,9:[1,7],10:8,13:9,14:10,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18]},{5:[2,54],9:[2,54],11:[2,54],20:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],28:[2,54],29:[2,54],31:[2,54],32:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],45:[2,54],46:[2,54],47:[2,54],48:[2,54],50:[2,54],51:[2,54],53:[2,54],54:[2,54],55:[2,54]},{5:[2,55],9:[2,55],11:[2,55],20:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],28:[2,55],29:[2,55],31:[2,55],32:[2,55],35:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],50:[2,55],51:[2,55],53:[2,55],54:[2,55],55:[2,55]},{9:[1,29],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],40:[2,57],44:115,46:[1,18],49:43,51:[1,48],52:47},{7:117,9:[1,7],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],44:116,46:[1,18],49:43,51:[1,48],52:47},{7:118,9:[1,7],40:[2,58],45:[1,89]},{10:37,12:119,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{10:37,12:120,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,11],30:12,33:19,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],46:[1,18],49:43,51:[1,48],52:47},{24:[1,67]},{5:[2,71],9:[2,71],20:[2,71],21:[2,71],22:[2,71],24:[2,71],40:[2,71],45:[2,71],47:[2,71],50:[2,71],51:[2,71]},{5:[2,72],9:[2,72],20:[2,72],21:[2,72],22:[2,72],24:[2,72],40:[2,72],45:[2,72],47:[2,72],50:[2,72],51:[2,72]},{5:[2,33],9:[2,33],20:[2,33],21:[2,33],24:[2,33],40:[2,33],45:[2,33],47:[2,33],50:[1,69],51:[1,70]},{5:[2,23],9:[2,23],20:[2,23],24:[2,23],40:[2,23],45:[2,23],47:[2,23]},{5:[2,24],9:[2,24],20:[2,24],22:[2,78],23:[1,93],24:[2,24],31:[1,34],32:[1,35],40:[2,24],45:[2,24],47:[2,24],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{22:[1,71],50:[1,69],51:[1,70]},{5:[2,29],9:[2,29],21:[2,29],24:[2,29],40:[2,29],45:[2,29],47:[2,29]},{5:[2,30],9:[2,30],21:[2,30],22:[2,78],23:[1,93],24:[2,30],31:[1,34],32:[1,35],40:[2,30],45:[2,30],47:[2,30],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,74],9:[2,74],20:[2,74],21:[2,74],22:[2,74],24:[2,74],40:[2,74],45:[2,74],47:[2,74],50:[2,74],51:[2,74],53:[2,74],54:[2,74],55:[2,74]},{5:[2,75],9:[2,75],20:[2,75],21:[2,75],22:[2,75],24:[2,75],40:[2,75],45:[2,75],47:[2,75],50:[2,75],51:[2,75],53:[2,75],54:[2,75],55:[2,75]},{5:[2,76],9:[2,76],20:[2,76],21:[2,76],22:[2,76],24:[2,76],40:[2,76],45:[2,76],47:[2,76],50:[2,76],51:[2,76],53:[2,76],54:[2,76],55:[2,76]},{5:[2,21],9:[2,21],20:[2,21],24:[2,21],40:[2,21],45:[2,21],47:[2,21]},{5:[2,22],9:[2,22],20:[2,22],22:[2,78],23:[1,93],24:[2,22],31:[1,34],32:[1,35],40:[2,22],45:[2,22],47:[2,22],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,27],9:[2,27],21:[2,27],24:[2,27],40:[2,27],45:[2,27],47:[2,27]},{5:[2,28],9:[2,28],21:[2,28],22:[2,78],23:[1,93],24:[2,28],31:[1,34],32:[1,35],40:[2,28],45:[2,28],47:[2,28],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,25],9:[2,25],20:[2,25],24:[2,25],40:[2,25],45:[2,25],47:[2,25]},{5:[2,26],9:[2,26],20:[2,26],22:[2,78],23:[1,93],24:[2,26],31:[1,34],32:[1,35],40:[2,26],45:[2,26],47:[2,26],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{5:[2,31],9:[2,31],21:[2,31],24:[2,31],40:[2,31],45:[2,31],47:[2,31]},{5:[2,32],9:[2,32],21:[2,32],22:[2,78],23:[1,93],24:[2,32],31:[1,34],32:[1,35],40:[2,32],45:[2,32],47:[2,32],50:[2,78],51:[2,78],53:[2,78],54:[2,78],55:[2,78]},{47:[1,121]},{47:[1,122]},{9:[2,62],40:[2,62],45:[2,62]},{9:[2,61],40:[2,61],45:[2,61]},{9:[1,29],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],44:123,46:[1,18],49:43,51:[1,48],52:47},{9:[1,29],10:37,12:58,13:39,14:42,15:40,16:41,17:44,18:45,19:46,23:[1,13],25:14,26:15,27:16,28:[1,17],29:[1,59],30:12,33:60,34:20,35:[1,21],36:[1,22],37:[1,23],38:[1,24],39:[1,25],40:[2,59],44:115,46:[1,18],49:43,51:[1,48],52:47},{9:[2,65],40:[2,65],45:[2,65]},{9:[2,66],40:[2,66],45:[2,66]},{5:[2,68],9:[2,68],11:[2,68],20:[2,68],21:[2,68],22:[2,68],23:[2,68],24:[2,68],28:[2,68],29:[2,68],31:[2,68],32:[2,68],35:[2,68],36:[2,68],37:[2,68],38:[2,68],39:[2,68],40:[2,68],45:[2,68],46:[2,68],47:[2,68],48:[2,68],50:[2,68],51:[2,68],53:[2,68],54:[2,68],55:[2,68]},{5:[2,69],9:[2,69],11:[2,69],20:[2,69],21:[2,69],22:[2,69],23:[2,69],24:[2,69],28:[2,69],29:[2,69],31:[2,69],32:[2,69],35:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],40:[2,69],45:[2,69],46:[2,69],47:[2,69],48:[2,69],50:[2,69],51:[2,69],53:[2,69],54:[2,69],55:[2,69]},{9:[2,63],40:[2,63],45:[2,63]}],
defaultActions: {3:[2,2],26:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: [],
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "NEWLINE";
break;
case 1:/* skip other whitespace */
break;
case 2:return "NEWLINE"; /* skip comments */
break;
case 3:return "SIGN";
break;
case 4:return "AND";
break;
case 5:return "OR";
break;
case 6:return "NEG_NUMBER";
break;
case 7:return "NEG_NUMBER";
break;
case 8:return "NUMBER";
break;
case 9:return "NUMBER";
break;
case 10:return "REGEX";
break;
case 11:return "*";
break;
case 12:return "/";
break;
case 13:return "-";
break;
case 14:return "+";
break;
case 15:return "%";
break;
case 16:return "@";
break;
case 17:return "(";
break;
case 18:return ")";
break;
case 19:return "{";
break;
case 20:return "}";
break;
case 21:return "|";
break;
case 22:return "[";
break;
case 23:return "]";
break;
case 24:return "=";
break;
case 25:return "!";
break;
case 26:return ":";
break;
case 27:return "DOT";
break;
case 28:return ",";
break;
case 29:return "STRING";
break;
case 30:return "STRING";
break;
case 31:return "IDENTIFIER";
break;
case 32:return "JAVASCRIPT";
break;
case 33:return "EOF";
break;
case 34:return "INVALID";
break;
}
},
rules: [/^(?:(\r\n?|\n))/,/^(?:[^\S\r\n]+)/,/^(?:\/\/.*?(\r\n?|\n))/,/^(?:==|!=|<=|>=|<|>)/,/^(?:and)/,/^(?:or)/,/^(?:-[0-9]+\.?)/,/^(?:-([0-9]+)?\.[0-9]+)/,/^(?:[0-9]+\.?)/,/^(?:([0-9]+)?\.[0-9]+)/,/^(?:\/(\\.|[^\/\n])*\/[gim]*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\%)/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\!)/,/^(?:\:)/,/^(?:\.)/,/^(?:,)/,/^(?:\"(\\.|[^"\n])*?\")/,/^(?:\'(\\.|[^'\n])*?\')/,/^(?:[a-zA-Z_$][a-zA-Z0-9_$]*)/,/^(?:```.*?```)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

parser.yy = require('./parse-tree.js');
module.exports = parser;
