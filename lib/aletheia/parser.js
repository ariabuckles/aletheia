/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"program":3,"statementList":4,"EOF":5,"statementListBody":6,"separator":7,"statement":8,"NEWLINE":9,"lvalue":10,"=":11,"expression":12,"unitList":13,"additive":14,"booleanOp":15,"arrowExpr":16,"comparison":17,"booleanAndOp":18,"booleanOrOp":19,"AND":20,"unitExpression":21,"OR":22,"SIGN":23,"(":24,")":25,"function":26,"literal":27,"singleUnitList":28,"JAVASCRIPT":29,"IDENTIFIER":30,"tableaccess":31,"->":32,"DOT":33,"@":34,"tableNameLiteral":35,"table":36,"REGEX":37,"NUMBER":38,"NEG_NUMBER":39,"STRING":40,"{":41,"}":42,":":43,"fieldList":44,"fieldListBody":45,"field":46,",":47,"[":48,"]":49,"|":50,"multiplicative":51,"+":52,"-":53,"negative":54,"*":55,"/":56,"%":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",11:"=",20:"AND",22:"OR",23:"SIGN",24:"(",25:")",29:"JAVASCRIPT",30:"IDENTIFIER",32:"->",33:"DOT",34:"@",37:"REGEX",38:"NUMBER",39:"NEG_NUMBER",40:"STRING",41:"{",42:"}",43:":",47:",",48:"[",49:"]",50:"|",52:"+",53:"-",55:"*",56:"/",57:"%"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[4,2],[4,3],[6,1],[6,3],[7,1],[7,2],[8,3],[8,3],[8,1],[12,1],[12,1],[12,1],[12,1],[15,1],[15,1],[15,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[17,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[10,1],[10,1],[13,2],[13,2],[28,3],[16,3],[16,3],[31,3],[31,3],[27,1],[27,1],[27,1],[35,1],[35,1],[35,1],[36,2],[36,3],[36,3],[36,3],[44,1],[44,2],[44,2],[44,3],[45,1],[45,3],[45,3],[45,4],[46,1],[46,3],[46,3],[46,3],[46,3],[26,3],[26,5],[26,5],[26,5],[26,7],[26,7],[14,1],[14,3],[14,3],[51,1],[51,3],[51,3],[51,3],[54,2],[54,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:return [];
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0-1];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0-1];
break;
case 7:this.$ = [$$[$0]];
break;
case 8:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 9:
break;
case 10:
break;
case 11:this.$ = yy.Declaration($$[$0-2], $$[$0]);
break;
case 12:this.$ = yy.Assignment($$[$0-2], $$[$0]);
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = $$[$0]
break;
case 17:this.$ = $$[$0]
break;
case 18:this.$ = $$[$0]
break;
case 19:this.$ = $$[$0]
break;
case 20:this.$ = $$[$0]
break;
case 21:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 22:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 23:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 25:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 27:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 28:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 29:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 30:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 31:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 32:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 33:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 34:this.$ = $$[$0-1];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = $$[$0];
break;
case 39:this.$ = yy.Javascript($$[$0].slice(3, -3));
break;
case 40:this.$ = yy.Variable($$[$0]);
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = yy.UnitList([$$[$0-1], $$[$0]]);
break;
case 43:this.$ = $$[$0]; $$[$0].units.unshift($$[$0-1]);
break;
case 44:this.$ = yy.UnitList([$$[$0-2]]);
break;
case 45:this.$ = yy.ArrowApplication($$[$0-2], $$[$0]);
break;
case 46:this.$ = yy.ArrowApplication($$[$0-2], yy.UnitList([$$[$0]]));
break;
case 47:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 48:this.$ = new yy.TableAccess($$[$0-2], $$[$0]);
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = yy.Regex($$[$0]);
break;
case 52:this.$ = Number($$[$0]);
break;
case 53:this.$ = Number($$[$0]);
break;
case 54:this.$ = yy.String($$[$0]);
break;
case 55:this.$ = new yy.Table([], false);
break;
case 56:this.$ = new yy.Table([], true);
break;
case 57:this.$ = new yy.Table([], true);
break;
case 58:this.$ = new yy.Table($$[$0-1], false);
break;
case 59:this.$ = $$[$0];
break;
case 60:this.$ = $$[$0-1];
break;
case 61:this.$ = $$[$0];
break;
case 62:this.$ = $$[$0-1];
break;
case 63:this.$ = [$$[$0]];
break;
case 64:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 65:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 66:this.$ = $$[$0-3]; $$[$0-3].push($$[$0]);
break;
case 67:this.$ = yy.Field(null, $$[$0]);
break;
case 68:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 69:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 70:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 71:this.$ = yy.Field($$[$0-2], $$[$0]);
break;
case 72:this.$ = yy.RetLambda([], $$[$0-1]);
break;
case 73:this.$ = yy.RetLambda($$[$0-3].units, $$[$0-1]);
break;
case 74:this.$ = yy.RetLambda([$$[$0-3]], $$[$0-1]);
break;
case 75:this.$ = yy.Lambda([], $$[$0-2]);
break;
case 76:this.$ = yy.Lambda($$[$0-5].units, $$[$0-2]);
break;
case 77:this.$ = yy.Lambda([$$[$0-5]], $$[$0-2]);
break;
case 78:this.$ = $$[$0];
break;
case 79:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 80:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 83:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 84:this.$ = yy.Operation($$[$0-2], $$[$0-1], $$[$0]);
break;
case 85:this.$ = yy.Operation(null, $$[$0-1], $$[$0]);
break;
case 86:this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:[1,7],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{1:[3]},{5:[1,36]},{1:[2,2]},{5:[2,3],7:37,9:[1,7]},{6:38,8:6,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,7],9:[2,7]},{5:[2,9],9:[2,9],24:[2,9],29:[2,9],30:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],48:[2,9],49:[2,9],53:[2,9]},{5:[2,37],9:[2,37],11:[1,40],20:[2,37],22:[2,37],23:[2,37],24:[2,37],29:[2,37],30:[2,37],32:[2,37],33:[2,37],34:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],48:[2,37],49:[2,37],50:[2,37],52:[2,37],53:[2,37],55:[2,37],56:[2,37],57:[2,37]},{5:[2,14],9:[2,14],11:[1,41],32:[2,14],49:[2,14]},{5:[2,13],9:[2,13],32:[1,42],49:[2,13]},{5:[2,40],9:[2,40],11:[2,40],20:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],29:[2,40],30:[2,40],32:[2,40],33:[2,40],34:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],52:[2,40],53:[2,40],55:[2,40],56:[2,40],57:[2,40]},{5:[2,41],9:[2,41],11:[2,41],20:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],29:[2,41],30:[2,41],32:[2,41],33:[2,41],34:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],52:[2,41],53:[2,41],55:[2,41],56:[2,41],57:[2,41]},{5:[2,86],9:[2,86],10:50,13:44,20:[1,48],21:43,22:[1,49],23:[2,86],24:[1,47],25:[2,86],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,32:[2,86],33:[1,45],34:[1,46],35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[2,86],47:[2,86],48:[1,26],49:[2,86],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,15],9:[2,15],23:[1,53],25:[2,15],32:[2,15],42:[2,15],47:[2,15],49:[2,15],52:[1,51],53:[1,52]},{5:[2,16],9:[2,16],25:[2,16],32:[2,16],42:[2,16],47:[2,16],49:[2,16]},{5:[2,17],9:[2,17],25:[2,17],32:[2,17],42:[2,17],47:[2,17],49:[2,17]},{10:50,12:54,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,35],9:[2,35],11:[2,35],20:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],29:[2,35],30:[2,35],32:[2,35],33:[2,35],34:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[2,35],42:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35],52:[2,35],53:[2,35],55:[2,35],56:[2,35],57:[2,35]},{5:[2,36],9:[2,36],11:[2,36],20:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],29:[2,36],30:[2,36],32:[2,36],33:[2,36],34:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],52:[2,36],53:[2,36],55:[2,36],56:[2,36],57:[2,36]},{5:[2,38],9:[2,38],11:[2,38],20:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],29:[2,38],30:[2,38],32:[2,38],33:[2,38],34:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],52:[2,38],53:[2,38],55:[2,38],56:[2,38],57:[2,38]},{5:[2,39],9:[2,39],11:[2,39],20:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],29:[2,39],30:[2,39],32:[2,39],33:[2,39],34:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],52:[2,39],53:[2,39],55:[2,39],56:[2,39],57:[2,39]},{5:[2,78],9:[2,78],20:[2,78],22:[2,78],23:[2,78],25:[2,78],32:[2,78],42:[2,78],47:[2,78],49:[2,78],52:[2,78],53:[2,78],55:[1,56],56:[1,57],57:[1,58]},{5:[2,18],9:[2,18],20:[1,59],22:[1,60],25:[2,18],32:[2,18],42:[2,18],47:[2,18],49:[2,18]},{5:[2,19],9:[2,19],20:[1,61],25:[2,19],32:[2,19],42:[2,19],47:[2,19],49:[2,19]},{5:[2,20],9:[2,20],22:[1,62],25:[2,20],32:[2,20],42:[2,20],47:[2,20],49:[2,20]},{7:66,8:63,9:[1,7],10:8,12:10,13:64,14:14,15:15,16:16,17:23,18:24,19:25,21:65,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,49],9:[2,49],11:[2,49],20:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],29:[2,49],30:[2,49],32:[2,49],33:[2,49],34:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],52:[2,49],53:[2,49],55:[2,49],56:[2,49],57:[2,49]},{5:[2,50],9:[2,50],11:[2,50],20:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],29:[2,50],30:[2,50],32:[2,50],33:[2,50],34:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],52:[2,50],53:[2,50],55:[2,50],56:[2,50],57:[2,50]},{5:[2,51],9:[2,51],11:[2,51],20:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],29:[2,51],30:[2,51],32:[2,51],33:[2,51],34:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],52:[2,51],53:[2,51],55:[2,51],56:[2,51],57:[2,51]},{5:[2,81],9:[2,81],20:[2,81],22:[2,81],23:[2,81],25:[2,81],32:[2,81],42:[2,81],47:[2,81],49:[2,81],52:[2,81],53:[2,81],55:[2,81],56:[2,81],57:[2,81]},{5:[2,52],9:[2,52],11:[2,52],20:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],29:[2,52],30:[2,52],32:[2,52],33:[2,52],34:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],52:[2,52],53:[2,52],55:[2,52],56:[2,52],57:[2,52]},{5:[2,53],9:[2,53],11:[2,53],20:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],29:[2,53],30:[2,53],32:[2,53],33:[2,53],34:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],52:[2,53],53:[2,53],55:[2,53],56:[2,53],57:[2,53]},{5:[2,54],9:[2,54],11:[2,54],20:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],29:[2,54],30:[2,54],32:[2,54],33:[2,54],34:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],43:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],52:[2,54],53:[2,54],55:[2,54],56:[2,54],57:[2,54]},{7:72,9:[1,7],10:50,11:[1,69],12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[1,67],43:[1,68],44:70,45:71,46:73,48:[1,26],51:22,53:[1,35],54:30},{10:50,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],53:[1,35],54:77},{1:[2,1]},{5:[2,4],8:79,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,5],7:80,9:[1,7]},{5:[2,10],9:[2,10],24:[2,10],29:[2,10],30:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],48:[2,10],49:[2,10],53:[2,10]},{10:50,12:81,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,12:82,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,13:83,21:84,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26]},{5:[2,42],9:[2,42],10:50,11:[2,42],13:44,21:43,24:[1,47],25:[2,42],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,32:[2,42],33:[1,45],34:[1,46],35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[2,42],47:[2,42],48:[1,26],49:[2,42],50:[2,42]},{5:[2,43],9:[2,43],11:[2,43],25:[2,43],32:[2,43],42:[2,43],47:[2,43],49:[2,43],50:[2,43]},{30:[1,85]},{10:50,21:86,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26]},{10:50,12:54,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],25:[1,87],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:90,17:88,21:89,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:90,17:91,21:92,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,37],9:[2,37],11:[2,37],20:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],29:[2,37],30:[2,37],32:[2,37],33:[2,37],34:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],52:[2,37],53:[2,37],55:[2,37],56:[2,37],57:[2,37]},{10:50,14:93,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:94,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:95,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{25:[1,96],32:[1,42]},{5:[2,14],9:[2,14],25:[2,14],32:[2,14],42:[2,14],47:[2,14],49:[2,14]},{10:50,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:97,53:[1,35],54:30},{10:50,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:98,53:[1,35],54:30},{10:50,21:78,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:99,53:[1,35],54:30},{10:50,14:90,17:100,21:101,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:90,17:102,21:103,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:90,17:104,21:105,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,14:90,17:106,21:107,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{49:[1,108]},{11:[1,41],32:[2,14],49:[2,14],50:[1,109]},{10:50,13:44,20:[1,48],21:43,22:[1,49],23:[2,86],24:[1,47],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,32:[2,86],33:[1,45],34:[1,46],35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],49:[2,86],50:[1,110],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{6:111,8:6,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,55],9:[2,55],11:[2,55],20:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],29:[2,55],30:[2,55],32:[2,55],33:[2,55],34:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],52:[2,55],53:[2,55],55:[2,55],56:[2,55],57:[2,55]},{42:[1,112]},{42:[1,113]},{42:[1,114]},{7:115,9:[1,7],42:[2,59],47:[1,116]},{9:[1,39],10:50,12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],45:117,46:73,48:[1,26],51:22,53:[1,35],54:30},{9:[2,63],42:[2,63],47:[2,63]},{9:[2,67],32:[1,42],42:[2,67],47:[2,67]},{9:[2,40],11:[1,119],20:[2,40],22:[2,40],23:[2,40],24:[2,40],29:[2,40],30:[2,40],32:[2,40],33:[2,40],34:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[1,118],47:[2,40],48:[2,40],52:[2,40],53:[2,40],55:[2,40],56:[2,40],57:[2,40]},{9:[2,49],11:[1,121],20:[2,49],22:[2,49],23:[2,49],24:[2,49],29:[2,49],30:[2,49],32:[2,49],33:[2,49],34:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[1,120],47:[2,49],48:[2,49],52:[2,49],53:[2,49],55:[2,49],56:[2,49],57:[2,49]},{5:[2,85],9:[2,85],20:[2,85],22:[2,85],23:[2,85],25:[2,85],32:[2,85],42:[2,85],47:[2,85],49:[2,85],52:[2,85],53:[2,85],55:[2,85],56:[2,85],57:[2,85]},{5:[2,86],9:[2,86],20:[2,86],22:[2,86],23:[2,86],24:[1,122],25:[2,86],32:[2,86],33:[1,45],34:[1,46],42:[2,86],47:[2,86],49:[2,86],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,8],9:[2,8]},{5:[2,6],8:79,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{5:[2,11],9:[2,11],32:[1,42],49:[2,11]},{5:[2,12],9:[2,12],32:[1,42],49:[2,12]},{5:[2,45],9:[2,45],25:[2,45],32:[2,45],42:[2,45],47:[2,45],49:[2,45]},{5:[2,46],9:[2,46],10:50,13:44,21:43,24:[1,47],25:[2,46],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,32:[2,46],33:[1,45],34:[1,46],35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[2,46],47:[2,46],48:[1,26],49:[2,46]},{5:[2,47],9:[2,47],11:[2,47],20:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],29:[2,47],30:[2,47],32:[2,47],33:[2,47],34:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],52:[2,47],53:[2,47],55:[2,47],56:[2,47],57:[2,47]},{5:[2,48],9:[2,48],11:[2,48],20:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],29:[2,48],30:[2,48],32:[2,48],33:[2,48],34:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],52:[2,48],53:[2,48],55:[2,48],56:[2,48],57:[2,48]},{5:[2,44],9:[2,44],11:[2,44],20:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],29:[2,44],30:[2,44],32:[2,44],33:[2,44],34:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],52:[2,44],53:[2,44],55:[2,44],56:[2,44],57:[2,44]},{5:[2,23],9:[2,23],20:[2,23],25:[2,23],32:[2,23],42:[2,23],47:[2,23],49:[2,23]},{5:[2,24],9:[2,24],20:[2,24],23:[2,86],24:[1,122],25:[2,24],32:[2,24],33:[1,45],34:[1,46],42:[2,24],47:[2,24],49:[2,24],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{23:[1,53],52:[1,51],53:[1,52]},{5:[2,29],9:[2,29],22:[2,29],25:[2,29],32:[2,29],42:[2,29],47:[2,29],49:[2,29]},{5:[2,30],9:[2,30],22:[2,30],23:[2,86],24:[1,122],25:[2,30],32:[2,30],33:[1,45],34:[1,46],42:[2,30],47:[2,30],49:[2,30],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,79],9:[2,79],20:[2,79],22:[2,79],23:[2,79],25:[2,79],32:[2,79],42:[2,79],47:[2,79],49:[2,79],52:[2,79],53:[2,79]},{5:[2,80],9:[2,80],20:[2,80],22:[2,80],23:[2,80],25:[2,80],32:[2,80],42:[2,80],47:[2,80],49:[2,80],52:[2,80],53:[2,80]},{5:[2,33],9:[2,33],20:[2,33],22:[2,33],25:[2,33],32:[2,33],42:[2,33],47:[2,33],49:[2,33],52:[1,51],53:[1,52]},{5:[2,34],9:[2,34],11:[2,34],20:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],29:[2,34],30:[2,34],32:[2,34],33:[2,34],34:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],52:[2,34],53:[2,34],55:[2,34],56:[2,34],57:[2,34]},{5:[2,82],9:[2,82],20:[2,82],22:[2,82],23:[2,82],25:[2,82],32:[2,82],42:[2,82],47:[2,82],49:[2,82],52:[2,82],53:[2,82],55:[2,82],56:[2,82],57:[2,82]},{5:[2,83],9:[2,83],20:[2,83],22:[2,83],23:[2,83],25:[2,83],32:[2,83],42:[2,83],47:[2,83],49:[2,83],52:[2,83],53:[2,83],55:[2,83],56:[2,83],57:[2,83]},{5:[2,84],9:[2,84],20:[2,84],22:[2,84],23:[2,84],25:[2,84],32:[2,84],42:[2,84],47:[2,84],49:[2,84],52:[2,84],53:[2,84],55:[2,84],56:[2,84],57:[2,84]},{5:[2,21],9:[2,21],20:[2,21],25:[2,21],32:[2,21],42:[2,21],47:[2,21],49:[2,21]},{5:[2,22],9:[2,22],20:[2,22],23:[2,86],24:[1,122],25:[2,22],32:[2,22],33:[1,45],34:[1,46],42:[2,22],47:[2,22],49:[2,22],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,27],9:[2,27],22:[2,27],25:[2,27],32:[2,27],42:[2,27],47:[2,27],49:[2,27]},{5:[2,28],9:[2,28],22:[2,28],23:[2,86],24:[1,122],25:[2,28],32:[2,28],33:[1,45],34:[1,46],42:[2,28],47:[2,28],49:[2,28],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,25],9:[2,25],20:[2,25],25:[2,25],32:[2,25],42:[2,25],47:[2,25],49:[2,25]},{5:[2,26],9:[2,26],20:[2,26],23:[2,86],24:[1,122],25:[2,26],32:[2,26],33:[1,45],34:[1,46],42:[2,26],47:[2,26],49:[2,26],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,31],9:[2,31],22:[2,31],25:[2,31],32:[2,31],42:[2,31],47:[2,31],49:[2,31]},{5:[2,32],9:[2,32],22:[2,32],23:[2,86],24:[1,122],25:[2,32],32:[2,32],33:[1,45],34:[1,46],42:[2,32],47:[2,32],49:[2,32],52:[2,86],53:[2,86],55:[2,86],56:[2,86],57:[2,86]},{5:[2,72],9:[2,72],11:[2,72],20:[2,72],22:[2,72],23:[2,72],24:[2,72],25:[2,72],29:[2,72],30:[2,72],32:[2,72],33:[2,72],34:[2,72],37:[2,72],38:[2,72],39:[2,72],40:[2,72],41:[2,72],42:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],52:[2,72],53:[2,72],55:[2,72],56:[2,72],57:[2,72]},{7:124,8:123,9:[1,7],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{7:126,8:125,9:[1,7],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{7:127,9:[1,7]},{5:[2,56],9:[2,56],11:[2,56],20:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],29:[2,56],30:[2,56],32:[2,56],33:[2,56],34:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],52:[2,56],53:[2,56],55:[2,56],56:[2,56],57:[2,56]},{5:[2,57],9:[2,57],11:[2,57],20:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],29:[2,57],30:[2,57],32:[2,57],33:[2,57],34:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],52:[2,57],53:[2,57],55:[2,57],56:[2,57],57:[2,57]},{5:[2,58],9:[2,58],11:[2,58],20:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],29:[2,58],30:[2,58],32:[2,58],33:[2,58],34:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],52:[2,58],53:[2,58],55:[2,58],56:[2,58],57:[2,58]},{9:[1,39],10:50,12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[2,60],46:128,48:[1,26],51:22,53:[1,35],54:30},{7:130,9:[1,7],10:50,12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],46:129,48:[1,26],51:22,53:[1,35],54:30},{7:131,9:[1,7],42:[2,61],47:[1,116]},{10:50,12:132,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,12:133,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,12:134,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{10:50,12:135,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{25:[1,87]},{49:[1,136]},{6:137,8:6,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{49:[1,138]},{6:139,8:6,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],51:22,53:[1,35],54:30},{8:79,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],49:[1,140],51:22,53:[1,35],54:30},{9:[2,65],42:[2,65],47:[2,65]},{9:[2,64],42:[2,64],47:[2,64]},{9:[1,39],10:50,12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],46:141,48:[1,26],51:22,53:[1,35],54:30},{9:[1,39],10:50,12:74,13:55,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,75],31:12,35:76,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],42:[2,62],46:128,48:[1,26],51:22,53:[1,35],54:30},{9:[2,68],32:[1,42],42:[2,68],47:[2,68]},{9:[2,69],32:[1,42],42:[2,69],47:[2,69]},{9:[2,70],32:[1,42],42:[2,70],47:[2,70]},{9:[2,71],32:[1,42],42:[2,71],47:[2,71]},{5:[2,73],9:[2,73],11:[2,73],20:[2,73],22:[2,73],23:[2,73],24:[2,73],25:[2,73],29:[2,73],30:[2,73],32:[2,73],33:[2,73],34:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],41:[2,73],42:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],52:[2,73],53:[2,73],55:[2,73],56:[2,73],57:[2,73]},{7:142,9:[1,7]},{5:[2,74],9:[2,74],11:[2,74],20:[2,74],22:[2,74],23:[2,74],24:[2,74],25:[2,74],29:[2,74],30:[2,74],32:[2,74],33:[2,74],34:[2,74],37:[2,74],38:[2,74],39:[2,74],40:[2,74],41:[2,74],42:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],52:[2,74],53:[2,74],55:[2,74],56:[2,74],57:[2,74]},{7:143,9:[1,7]},{5:[2,75],9:[2,75],11:[2,75],20:[2,75],22:[2,75],23:[2,75],24:[2,75],25:[2,75],29:[2,75],30:[2,75],32:[2,75],33:[2,75],34:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],41:[2,75],42:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],52:[2,75],53:[2,75],55:[2,75],56:[2,75],57:[2,75]},{9:[2,66],42:[2,66],47:[2,66]},{8:79,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],49:[1,144],51:22,53:[1,35],54:30},{8:79,9:[1,39],10:8,12:10,13:9,14:14,15:15,16:16,17:23,18:24,19:25,21:13,24:[1,17],26:18,27:19,28:20,29:[1,21],30:[1,11],31:12,35:27,36:28,37:[1,29],38:[1,31],39:[1,32],40:[1,33],41:[1,34],48:[1,26],49:[1,145],51:22,53:[1,35],54:30},{5:[2,76],9:[2,76],11:[2,76],20:[2,76],22:[2,76],23:[2,76],24:[2,76],25:[2,76],29:[2,76],30:[2,76],32:[2,76],33:[2,76],34:[2,76],37:[2,76],38:[2,76],39:[2,76],40:[2,76],41:[2,76],42:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],52:[2,76],53:[2,76],55:[2,76],56:[2,76],57:[2,76]},{5:[2,77],9:[2,77],11:[2,77],20:[2,77],22:[2,77],23:[2,77],24:[2,77],25:[2,77],29:[2,77],30:[2,77],32:[2,77],33:[2,77],34:[2,77],37:[2,77],38:[2,77],39:[2,77],40:[2,77],41:[2,77],42:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],52:[2,77],53:[2,77],55:[2,77],56:[2,77],57:[2,77]}],
defaultActions: {3:[2,2],36:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: [],
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("INSIDE_PARENS"); return "(";
break;
case 1:this.popState(); return ")";
break;
case 2:this.pushState("INITIAL"); return "{";
break;
case 3:this.popState(); return "}";
break;
case 4:this.pushState("INITIAL"); return "[";
break;
case 5:this.popState(); return "]";
break;
case 6:return "|";
break;
case 7:return "->";
break;
case 8:return YY_START === "INITIAL" ? "NEWLINE" : null;
break;
case 9:/* skip other whitespace */
break;
case 10:return YY_START === "INITIAL" ? "NEWLINE" : null; /* skip comments */
break;
case 11:return "SIGN";
break;
case 12:return "AND";
break;
case 13:return "OR";
break;
case 14:return "NEG_NUMBER";
break;
case 15:return "NEG_NUMBER";
break;
case 16:return "NUMBER";
break;
case 17:return "NUMBER";
break;
case 18:return "REGEX";
break;
case 19:return "*";
break;
case 20:return "/";
break;
case 21:return "-";
break;
case 22:return "+";
break;
case 23:return "%";
break;
case 24:return "@";
break;
case 25:return "=";
break;
case 26:return "!";
break;
case 27:return ":";
break;
case 28:return "DOT";
break;
case 29:return ",";
break;
case 30:return "STRING";
break;
case 31:return "STRING";
break;
case 32:return "IDENTIFIER";
break;
case 33:return "JAVASCRIPT";
break;
case 34:return "EOF";
break;
case 35:return "INVALID";
break;
}
},
rules: [/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:->)/,/^(?:(\r\n?|\n))/,/^(?:[^\S\r\n]+)/,/^(?:\/\/.*?(\r\n?|\n))/,/^(?:==|!=|<=|>=|<|>)/,/^(?:and)/,/^(?:or)/,/^(?:-[0-9]+)/,/^(?:-([0-9]+)?\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([0-9]+)?\.[0-9]+)/,/^(?:\/(\\.|[^\/\n])*\/[gim]*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\%)/,/^(?:@)/,/^(?:=)/,/^(?:\!)/,/^(?:\:)/,/^(?:\.)/,/^(?:,)/,/^(?:\"(\\.|[^"\n])*?\")/,/^(?:\'(\\.|[^'\n])*?\')/,/^(?:[a-zA-Z_$][a-zA-Z0-9_$]*)/,/^(?:```.*?```)/,/^(?:$)/,/^(?:.)/],
conditions: {"INSIDE_PARENS":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

parser.yy = require('./parse-tree.js');
module.exports = parser;
